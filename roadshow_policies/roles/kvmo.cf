bundle agent kvmo {

vars:

  "role_name"                                 string => "kvm hypervisor opennebula node";

  "bundles[kvm_host]"                         string => "${sys.flavor}/kvm_host.cf";
  "bundles[opennebula_node]"                  string => "${sys.flavor}/opennebula_node.cf";

  "sequence"                                  slist  => getindices("bundles");
  "inputs"                                    slist  => getvalues("bundles");

methods:

  "KVM host ready for VM"                  usebundle => "kvm_host";
  "We desire Opennebula"                   usebundle => "opennebula_node"; 

reports:

 "$(this.bundle): $(classify.role) $($(classify.role).inputs)";
 "$(this.bundle): $(admin_nics)";

}

bundle agent kvmo_data {
  
vars:

  "vlan[service]"                     string => "$(classify.eco_vars).network[service][vlan]";
  "vlan[support]"                     string => "$(classify.eco_vars).network[support][vlan]";
  "vlan[admin]"                       string => "$(classify.eco_vars).network[admin][vlan]";
  "vlan[wan]"                         string => "$(classify.eco_vars).network[wan][vlan]";
  "vlan[gw]"                          string => "$(classify.eco_vars).network[gw][vlan]";
  "vlan[life]"                        string => "$(classify.eco_vars).network[life][vlan]";
  "vlan[roadshow]"                    string => "$(classify.eco_vars).network[roadshow][vlan]";

  "vlan_index"                         slist => getindices("vlan");

  "nic[service]"                      string => "$(classify.interface).vlan[service]";
  "nic[support]"                      string => "$(classify.interface).vlan[support]";
  "nic[admin]"                        string => "$(classify.interface).vlan[admin]";
  "nic[wan]"                          string => "$(classify.interface).vlan[wan]";
  "nic[gw]"                           string => "$(classify.interface).vlan[gw]";
  "nic[life]"                         string => "$(classify.interface).vlan[life]";
  "nic[roadshow]"                     string => "$(classify.interface).vlan[roadshow]";

  "nic_index"                          slist => getindices("nic");

  "ddns[support][ip]"                 string => "$(sys.ipv4[$(classify.bridge)_$(vlan[support])])";
  "ddns[support][nic]"                string => "$(classify.bridge)_$(vlan[support])";
  "ddns[support][suffix]"             string => "";
  "ddns[support][vlan]"               string => "$($(classify.eco_vars)_network[support][vlan])";

  "ddns_index"                         slist => getindices("ddns");

  "etc_hosts_nic"                     slist  => { "$(ddns[support][ip])" };
  "support_ip"                        slist  => { "$(ddns[support][ip])" };
  "admin_nics"                        slist  => { "$(ddns[support][ip])" };

methods:

  "Check interfaces and bridges are up"    usebundle => check_vswitch( "$(vlan[$(vlan_index)])" ),
                                           comment   => "This is a layer I and II check on the virtual switch";

reports:

 "$(this.bundle) ddns: $(ddns_index), $(ddns[$(ddns_index)])";
 "$(this.bundle) vlans: $(vlan_index), $(vlan[$(vlan_index)])";
 "$(this.bundle) etc_hosts_nic: $(etc_hosts_nic)";
 "$(this.bundle) admin_nics: $(admin_nics)";


}

