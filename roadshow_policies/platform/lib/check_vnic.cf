bundle agent check_vnic(vnic) {

vars:

  "var_vnic_$(vnic)"                  string => execresult("$($(sys.flavor).ip_cmd) link show dev $(vnic)","noshell");

methods:

  "Set vnic class"                 usebundle => set_vnic_class( "$(vnic)", "$(var_vnic_$(vnic))" );

reports:

  "$(this.bundle): $(vnic) $(var_vnic_$(vnic))";

}

bundle agent set_vnic_class(vnic, show_vnic) {

classes:

  "no_device_$(vnic)"             expression => regcmp( ".*does not exist.*",
                                                        "$(show_vnic)");

  "if_down $(vnic)"               expression => regcmp( ".*DOWN.*",
                                                        "$(show_vnic)");

methods:

 "no_device_$(vnic)"::
  "Set status bad"                 usebundle => status_device("bad");
  "Add device $(vnic)"             usebundle => add_vnic( "$(vnic)" );
  "Bring up vnic $(vnic)"          usebundle => bring_vnic_up( "$(vnic)" ),
                                     comment => "layer one";

 "if_down_$(vnic)"::
  "Set status bad"                 usebundle => status_device("bad");
  "Bring up vnic $(vnic)"          usebundle => bring_vnic_up( "$(vnic)" ),
                                     comment => "layer one";

reports:

  "$(this.bundle) no_device_$(vnic): $(no_device_$(vnic))";
  "$(this.bundle) if_down_$(vnic): $(if_down_$(vnic))";

 "no_device_$(vnic)"::
  "$(this.bundle): $(show_vnic) Bingo!";

 "if_down_$(vnic)"::
  "$(this.bundle): $(show_vnic) Bingo!";

}

bundle agent add_vnic(vnic) {

commands:
 
  "/sbin/ip link add link $(vnic)";

reports:

 "$(this.bundle): vnic $(vnic) added!";

}

bundle agent bring_vnic_up(vnic) {

commands:
 
  "/sbin/ip link set dev $(vnic) up";
  "/sbin/ifup $(vnic)";

reports:

 "$(this.bundle): vnic $(vnic) up!";

}
