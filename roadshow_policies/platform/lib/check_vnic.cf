bundle agent check_vnic(vnic) {

vars:

  "interface"                         string => "eth0";
  "bridge"                            string => "breth0";
  "var_interface_$(vlan)"             string => execresult("/sbin/ip link show dev $(interface).$(vlan)","noshell");
  "var_bridge_$(vlan)"                string => execresult("/sbin/ip link show dev $(bridge).$(vlan)","noshell");

methods:

  "Set interface class"            usebundle => set_interface_class( "$(vlan)", "$(var_interface_$(vlan))" );
  "Set bridge class"               usebundle => set_bridge_class( "$(vlan)", "$(var_bridge_$(vlan))" );

reports:

  "$(this.bundle): $(interface)_$(vlan)";

}

bundle agent set_interface_class(vlan, var_interface_vlan) {

classes:

  "no_device_$(vlan)"             expression => regcmp( ".*does not exist.*",
                                                        "$(var_interface_vlan)");

  "if_down $(vlan)"               expression => regcmp( ".*DOWN.*",
                                                        "$(var_interface_vlan)");

vars:

  "interface"                         string => "eth0";

methods:

 "no_device_$(vlan)"::
  "Add device $(vlan)"             usebundle => add_device( "$(interface)", "$(vlan)" );
  "Bring up interface $(vlan)"     usebundle => bring_device_up( "$(interface)", "$(vlan)" ),
                                     comment => "layer one";

 "if_down_$(vlan)"::
  "Bring up interface $(vlan)"     usebundle => bring_device_up( "$(interface)", "$(vlan)" ),
                                     comment => "layer one";

reports:

 "no_device_$(vlan)"::
  "$(this.bundle): $(var_interface_vlan) Bingo!";

 "if_down_$(vlan)"::
  "$(this.bundle): $(var_interface_vlan) Bingo!";

}


bundle agent set_bridge_class(vlan, var_bridge_vlan) {

classes:

  "no_bridge_$(vlan)"             expression => regcmp( ".*does not exist.*",
                                                        "$(var_bridge_vlan)");

  "bridge_down $(vlan)"           expression => regcmp( ".*DOWN.*",
                                                        "$(var_bridge_vlan)");

vars:

  "bridge"                            string => "breth0";

methods:

 "no_bridge_$(vlan)"::
  "Add bridge $(vlan)"             usebundle => add_bridge( "$(bridge)", "$(vlan)" );
  "Bring up bridge $(vlan)"        usebundle => bring_bridge_up( "$(bridge)", "$(vlan)" ),
                                     comment => "layer two";
  "Bad IP $(vlan)"                 usebundle => bad_ip( "$(vlan)" );

 "bridge_down_$(vlan)"::
  "Bring up bridge $(vlan)"        usebundle => bring_bridge_up( "$(bridge)", "$(vlan)" ),
                                     comment => "layer two";
  "Bad IP $(vlan)"                 usebundle => bad_ip( "$(vlan)" );

reports:

 "no_bridge_$(vlan)"::
  "$(this.bundle): $(var_bridge_vlan) Bingo, no bridge!";

 "bridge_down_$(vlan)"::
  "$(this.bundle): $(var_bridge_vlan) Bingo, bridge down!";

}

bundle agent add_device(interface, vlan) {

commands:
 
  "/sbin/ip link add link eth0 name $(interface).$(vlan) type vlan id $(vlan)";

reports:

 "$(this.bundle): interface $(interface).$(vlan) added!";

}

bundle agent bring_device_up(interface, vlan) {

commands:
 
  "/sbin/ip link set dev $(interface).$(vlan) up";
  "/sbin/vconfig add $(interface) $(vlan)";

reports:

 "$(this.bundle): interface $(interface).$(vlan) up!";

}

bundle agent add_bridge(bridge, vlan) {

commands:
 
  "/usr/bin/ovs-vsctl add-br breth0.$(vlan)";
  "/usr/bin/ovs-vsctl add-port breth0.$(vlan) eth0.$(vlan) vlan_mode=trunk tag=$(vlan)";

reports:

 "$(this.bundle): bridge $(bridge).$(vlan) added!";

}

bundle agent bring_bridge_up(bridge, vlan) {

commands:
 
  "/sbin/ip link set dev $(bridge).$(vlan) up";
  "/sbin/ifup $(bridge).$(vlan)";
#  comment => "Make sure of layer three if bridge has an IP addres";

reports:

 "$(this.bundle): bridge $(bridge).$(vlan) up!";

}

bundle agent bad_ip(ips) {

classes:

  "bad_ip"        expression => regcmp( "bad_ip", $(bad_ip) );

vars:

  "bad_ip"            string => "bad_ip";

methods:

 bad_ip::

  "The show stops here!"  usebundle => stop_the_show;

reports:

  "$(this.bundle) Bad IP addresson interface: $(ips)!";

}

