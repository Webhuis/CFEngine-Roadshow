bundle agent check_ip(ips) {

classes:

  "empty_variable_$(ips)"
   expression => strcmp("", "$(ips)"),
   comment    => "Deal with empty IP Address as a result of a faulty variable";

  "match_$(can_ips)"
   comment    => "Oh, the horror! Process the list of IP Addresses.",
   expression => regcmp(
"(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[_](25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[_](25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[_](25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})",
            $(can_ips)
            );

  "bad_$(ips)"
   comment    => "Oh, the horror! Bad string IP Addresses.",
   expression => regcmp(
"(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[\.](25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[\.](25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[\.](25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})",
            $(ips)
            );

vars:

  "can_ips"              string => canonify( $(ips) );

methods:

 '!match_$(can_ips)'::
  "Set status bad"                 usebundle => status_ip("bad");
# "Bell!!"            usebundle => bad_ip;

 empty_variable_$(ips)::
  "Set status bad"                 usebundle => status_ip("bad");

reports:

# "$(this.bundle) ip's: $(ips)";
# "$(this.bundle) ip list: $(ip_list)";

   "$(this.bundle) ip input: $(ips)";

  'match_$(can_ips)'::
   "$(this.bundle) good ip: $(can_ips)";

  bad_$(ips)::
   "$(this.bundle) bad variable for: $(ips)";

  empty_variable_$(ips)::
   "$(this.bundle) bad ip: $(ips)";

  '!match_$(can_ips)'::
   "$(this.bundle) bad ip: $(can_ips)";
}
