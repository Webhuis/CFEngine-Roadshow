bundle agent get_interfaces(vlan) {

vars:

  "vlans[$(vlan)]"           string => $(vlan);

  "vlan_index"                slist => getindices($(vlans));

methods:

  "Get vlan status"       usebundle => vlan_status("$(vlan_index)");

reports:

  "$(this.bundle): $(vlan_index)";

}

bundle agent vlan_status(vlan) {

classes:

  "$(kvm_host.interface_prefix)_$(vlan)" expression => regextract(
                                     ".*DOWN.*",
                                     "$(interface_$(vlan))",
                                     "down_interface_$(vlan)");

  "$(kvm_host.bridge_prefix)_$(vlan)" expression => regextract(
                                     ".*HWaddr ([^\s]+).*(\n.*)*",
                                     "$(bridge_$(vlan))",
                                     "down_bridge_$(vlan)");

vars:

  "interface_$(vlan)"        string => execresult("/sbin/ip link show dev $(kvm_host.interface_prefix).$(vlan)","noshell");
  "bridge_$(vlan)"           string => execresult("/sbin/ip link show dev $(kvm_host.bridge_prefix).$(vlan)","noshell");

methods:

 "!interface_$(vlan)"::
  "Bring up bridge $(vlan)"        usebundle => bring_link_up("$(kvm_host.interface_prefix).$(vlan)");

 "!bridge_$(vlan)"::
  "Bring up bridge $(vlan)"        usebundle => bring_link_up("$(kvm_host.bridge_prefix).$(vlan)");

reports:

  "$(this.bundle): $(kvm_host.interface_prefix)_$(vlan), $(kvm_host.bridge_prefix)_$(vlan)";

 "!$(kvm_host.interface_prefix)_$(vlan)"::
  "$(this.bundle): $(kvm_host.interface_prefix)_$(vlan) Bingo!";
 "!$(kvm_host.bridge_prefix)_$(vlan)"::
  "$(this.bundle): $(kvm_host.bridge_prefix)_$(vlan) Bingo!";

}

bundle agent bring_link_up(device) {

commands:

  "/sbin/ip link set dev $(device) up";

reports:

 "$(this.bundle): $(device) up!";

}
