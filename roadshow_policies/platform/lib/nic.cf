bundle agent nic (nic_index) {

classes:

  "common_nic"       expression => regextract("^([be][nrt][ehs][th]*)(.*)", $(nic_index), "nic_ord");

  "ens"              expression => regcmp("ens", "$(nic_ord[1])");
  "eth"              expression => regcmp("eth", "$(nic_ord[1])");
  "breth"            expression => regcmp("breth", "$(nic_ord[1])");

 ens::

  "front"            expression => regcmp("3", "$(nic_ord[2])");
  "support"          expression => regcmp("7", "$(nic_ord[2])");
  "admin"            expression => regcmp("8", "$(nic_ord[2])");

 eth::

  "front"            expression => regcmp("0", "$(nic_ord[2])");
  "support"          expression => regcmp("1", "$(nic_ord[2])");
  "admin"            expression => regcmp("2", "$(nic_ord[2])");

 breth::

  "front"            expression => regcmp("0_1001", "$(nic_ord[2])");
  "support"          expression => regcmp("0_123", "$(nic_ord[2])");
  "admin"            expression => regcmp("0_22", "$(nic_ord[2])");
  "life"             expression => regcmp("0_42", "$(nic_ord[2])");

vars:

  front::
   "nic_front"           string => "$(sys.ipv4[$(nic_ord[1])$(nic_ord[2])])";

  support::
   "nic_support"         string => "$(sys.ipv4[$(nic_ord[1])$(nic_ord[2])])";

  admin::
   "nic_admin"           string => "$(sys.ipv4[$(nic_ord[1])$(nic_ord[2])])";

  life::
   "nic_life"            string => "$(sys.ipv4[$(nic_ord[1])$(nic_ord[2])])";

reports:

  "$(this.bundle) nic_ord: $(nic_ord[1]) $(nic_ord[2])";
  "$(this.bundle) nic_front: $(nic_front)";
  "$(this.bundle) nic_support: $(nic_support)";
  "$(this.bundle) nic_admin: $(nic_admin)";
  "$(this.bundle) nic_life: $(nic_life)";

}

