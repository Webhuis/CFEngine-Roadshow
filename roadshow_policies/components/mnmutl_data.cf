bundle agent mnmutl_data(mnmutl_data) {

vars:

  "mnmutl"                          data => parsejson('${mnmutl_data}'); 
  "domains"                        slist => getindices("mnmutl"); 

methods:

  "Decompose message"          usebundle => decompose_mnmutl_data( @(mnmutl), ${domains} );
  "Create Nagios host stanza"  usebundle => nagios_hostgroups( $(domains) );

reports:

  "${this.bundle} mnmutl_data: ${mnmutl_data}";

}

bundle agent decompose_mnmutl_data( mnmutl, domains ) {

vars:

  "domain_services"       string => storejson("mnmutl[$(domains)]");
  "domain_container"        data => parsejson($(domain_services));
  "services_index"         slist => getindices("domain_container");

methods:

  "The response found" usebundle => domain_services(@(domain_container), $(domains), $(services_index) );

reports:

# "$(this.bundle) domain: $(mnmutl)";
  "$(this.bundle) domains: $(domains)";

}

bundle agent domain_services( domain_container, domains, services_idx ) {

vars:

  "services"                                     string => storejson("domain_container[$(services_idx)]");
  "services_data"                                  data => parsejson($(services));
  "services_values"                               slist => getvalues("services_data");
# "mnm_array[$(domains)][$(services_idx)]"       string => "$(services_values)";

methods:

  "Create Nagios services"                    usebundle => nagios_services;
  "Create Nagios host stanza"                 usebundle => nagios_host( $(domains), $(services_values) );
  "Create Nagios host-service stanza"         usebundle => nagios_hosts_services( $(domains), $(services_values), $(services_idx) );
#  "Get mnm values in array"                  usebundle => mnm_array("$(domain_services.mnm_array)");

reports:

  "$(this.bundle) domains services hosts: $(domains), $(services_idx), $(services_values)";

}

bundle agent nagios_hostgroups( domains ) {

methods:

  "Create hostgroup per domain" usebundle => nagios_hostgroup(${domains} );

reports:

  "$(this.bundle) hostgroup domains: $(domains)";

}

bundle agent nagios_hostgroup( domain ) {

files:
 "/etc/nagios3/hostgroups/${domain}.cfg"
         comment  => "Hostgroups configfile for Nagios",
           perms  => mog("664","nagios","nagios"),
          create  => "true",
          action  => r_immediate,
   edit_template  => "$(sys.workdir)/roadshow_dynamic_inputs/templates/nagios-hostgroups.tmpl",
         classes  => r_if_repaired("restart_nagios"); 

reports:

  "$(this.bundle) hostgroup per domain: $(domain)"; 

}

bundle agent nagios_host( domain, host ) {

vars:
 "fqdn"                        string => "${host}.${domain}";

files:
 "/etc/nagios3/hosts/${domain}/${fqdn}.cfg"
         comment  => "Hosts configfile for Nagios",
           perms  => mog("664","nagios","nagios"),
          create  => "true",
          action  => r_immediate,
   edit_template  => "$(sys.workdir)/roadshow_dynamic_inputs/templates/nagios-hosts.tmpl",
         classes  => r_if_repaired("restart_nagios");

reports:

  "$(this.bundle) fqdn: $(fqdn)";

}

bundle agent nagios_hosts_services( domain, host, services ) {

vars:
 "fqdn"                        string => "${host}.${domain}";

methods:

  "Create host service stanza" usebundle => nagios_host_service( ${fqdn}, ${services} );

reports:

  "$(this.bundle) host service: $(fqdn), ${services}";

}

bundle agent nagios_host_service( fqdn, services ) {

files:
 "/etc/nagios3/services/${fqdn}-${services}.cfg"
         comment  => "Host service configfile for Nagios",
           perms  => mog("664","nagios","nagios"),
          create  => "true",
          action  => r_immediate,
   edit_template  => "$(sys.workdir)/roadshow_dynamic_inputs/templates/nagios-hosts-service.tmpl",
         classes  => r_if_repaired("restart_nagios");

reports:

  "$(this.bundle) fqdn: $(fqdn)-${services}";

}

bundle agent nagios_services {

vars:
  "service[cfengine]"              string => "check_tcp!5308";
  "service[data]"                  string => "check_tcp!5309";
  "service[http]"                  string => "check_tcp!80";
  "service[https]"                 string => "check_tcp!443";
  "service[mysql]"                 string => "check_tcp!3306";
  "service[nfs]"                   string => "check_tcp!2049";
  "service[tomcat]"                string => "check_tcp!8080";

  "services"                        slist => getindices("service");
  "service_check"                   slist => getvalues("service");

methods:

  "Create config file per service" usebundle => services( "nagios_services.service" );

reports:

  "$(this.bundle) nagios_services.service-check: nagios_services.service[${services}]";
  "$(this.bundle) service-check: ${service_check}";
  "$(this.bundle) services: $(services)";

}

bundle agent services( services_array ) {

vars:

  "service_check_index"                      slist => getindices(${services_array});

methods:

  "Create config file per service" usebundle => service( "$(service_check_index)", "$($(services_array)[$(service_check_index)])" );

reports:

  "$(this.bundle) service: $(service_check_index)";

}

bundle agent service( service, service_check ) {

files:

  "/etc/nagios3/services/service_${service}.cfg"
         comment  => "Services configfile for Nagios",
           perms  => mog("664","nagios","nagios"),
          create  => "true",
          action  => r_immediate,
   edit_template  => "$(sys.workdir)/roadshow_dynamic_inputs/templates/nagios-service.tmpl",
         classes  => r_if_repaired("restart_nagios");

reports:

  "$(this.bundle) service: $(service), ${service_check}";

}
