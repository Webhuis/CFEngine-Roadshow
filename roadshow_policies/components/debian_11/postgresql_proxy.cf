bundle agent postgresql_proxy {

vars:

  "pkg[haproxy]"	   	   	string => "*";
  "pkg[keepalived]"	   	   	string => "*";
  "pkg[pgbouncer]"	           	string => "*";

  "my_keepalived_priority"              string => "$($(classify.domain).pg_keepalive_pear[$(role_data).ip[support]])";
  "my_keepalived_peers"                  slist => filer( $(role_data).ip[support], $($(classify.domain).pg_keepalive_peers), "false", true", 999);

  "templates"                            slist => { "haproxy.tmpl", "keepalived.conf.tmpl", "pgbouncer.conf.tmpl" };

files:

  "/etc/keepalived/keepalived.conf"
   perms             => mo("644","root"),
   create            => "true",
   action            => r_immediate,
   edit_template     => "$(sys.workdir)/roadshow_dynamic_inputs/templates/keepalived.conf.tmpl",
   classes           => r_if_repaired("restart_keepalived");

methods:
 
  "We desire postgresql HA cluster templates"  usebundle => get_template("$(templates)");
  "We desire the HA Postgresql cluster"        usebundle => packages("postgresql_proxy.pkg");
  "We want to know our peers"                  usebundle => keepalived_peers;

commands:

 restart_keepalived::

  "/etc/init.d/keepalived restart";

reports:

  "$(this.bundle): Configure postgresql_proxy";
  "$(this.bundle) Packages: $(pkg)";
  "$(this.bundle) my_keepalived_priority: $(my_keepalived_priority)";
  "$(this.bundle) my_keepalived_peers: $(my_keepalived_peers)";

}

bundle agent keepalived_peers {

vars:

  "pkg[haproxy]"                        string => "*";

reports:

  "$(this.bundle): Configure postgresql_proxy";
  "$(this.bundle) Packages: $(pkg)";

}

