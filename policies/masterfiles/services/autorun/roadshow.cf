###############################################################################
#
#   roadshow.cf - autorun policy
#
###############################################################################

body file control
{
      inputs => { @(do_roadshow.inputs) };
}

bundle agent roadshow
{
  meta:
      "tags" slist => { "autorun" };

  methods:
      "" usebundle => classify;
      "" usebundle => request_role_information;
      "" usebundle => do_roadshow;
      "" usebundle => roadshow_dynamic_update;
      "" usebundle => ${do_roadshow.class_domain};
      "" usebundle => $(do_roadshow.os);
      "" usebundle => $(classify.role);

reports:

 "${this.bundle} role:  $(classify.role)";

}

bundle agent do_roadshow {

  vars:
      # List here the IP masks that we grant access to on the server
      "acl"                   slist => { "10.*", "192.168.125.*", "62.45.247.173" };
      "master_location"      string => "$(sys.masterdir)";
      "master_dynamic"       string => "$(sys.workdir)/dynamic_policies";
      "dir_bin"              string => "$(sys.bindir)";
      "dir_modules"          string => "$(sys.workdir)/bin";
      "inputfiles"           string => "$(sys.inputdir)";

      "roadshow_policies"     slist => findfiles("$(sys.inputdir)/roadshow_policies/*.cf");
      "dynamic_inputs"        slist => findfiles("$(sys.workdir)/dynamic-inputs-local/**/*.cf");
      "inputs" slist => { @(roadshow_policies), @(dynamic_inputs), "$(sys.inputdir)/update/update_roadshow.cf" };

      "os"                   string => ${sys.flavor};
      "class_domain"         string => canonify("$(sys.domain)");
      "class_host"           string => canonify("$(sys.uqhost)");

      "policyhost"           string => "cfeutl01.webhuis.nl";
      "ntp_server"           string => "inuc-01.webhuis.nl";
      "nameserver"            slist => { "10.168.0.17", "8.8.8.8"};
      "punt_komma"           string => ";";


  reports:

      "${this.bundle}: ${class_domain}";

}

# proposed for stdlib, remove when/if it's accepted
bundle agent file_make_mog(file, str, mode, owner, group)
# @brief Make a file from a string with mode, owner, group
# @param file target
# @param str the string data
# @param mode the file permissions in octal
# @param owner the file owner as a name or UID
# @param group the file group as a name or GID
#
# **Example:**
#
# ```cf3
# methods:
#      "" usebundle => file_make_mog("/tmp/z.txt", "Some text
# and some more text here", "0644", "root", "root");
# ```
{
  files:
      "$(file)"
      create => "true",
      edit_line => insert_lines($(str)),
      perms => mog($(mode), $(owner), $(group)),
      edit_defaults => empty;

  reports:
    inform_mode|EXTRA::
      "$(this.bundle): creating $(file) with contents '$(str)', mode '$(mode)', owner '$(owner)' and group '$(group)'";
}
