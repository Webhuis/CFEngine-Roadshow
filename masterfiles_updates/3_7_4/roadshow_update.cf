#########################################################
#
# update_roadshow
# - Cfengine roadshow policy update (masterfiles -> inputs)
#
#########################################################

bundle agent roadshow_update {

vars:

  "master_standard" string => "$(sys.workdir)/masterfiles";
  "master_roadshow" string => "$(sys.workdir)/roadshow_policies";
  "roadshow_inputs" string => "$(sys.workdir)/roadshow_inputs";
  "vendor"          string => "$(vendor.vendor)";

files:

  "$(sys.workdir)/bin/cf-message.py"
     handle       => "update_bin_roadshow",
     copy_from    => r_rcp("${master_roadshow}/bin/cf-message.py", ${sys.policy_hub}),
     action       => r_immediate,
     classes      => r_if_repaired("update_report");

  "$(sys.workdir)/services/autorun"
     handle       => "update_files_inputs_roadshow_services_autorun",
     copy_from    => r_rcp("${master_standard}/services/autorun", ${sys.policy_hub}),
     file_select  => r_policies,
     action       => r_immediate,
     classes      => r_if_repaired("update_report");

  "$(sys.workdir)/roadshow_inputs/domain/${sys.domain}.cf"
     handle       => "update_files_inputs_roadshow_domain",
     copy_from    => r_rcp("${master_roadshow}/domain/${sys.domain}/${sys.domain}.cf", ${sys.policy_hub}),
     file_select  => r_policies,
     action       => r_immediate,
     classes      => r_if_repaired("update_report");

  "$(sys.workdir)/roadshow_inputs/platform/common"
     handle       => "update_files_inputs_roadshow_platform_common",
     depth_search => r_recurse("inf"),
     copy_from    => r_rcp("${master_roadshow}/platform/common", ${sys.policy_hub}),
     file_select  => r_policies,
     action       => r_immediate,
     classes      => r_if_repaired("update_report");

  "$(sys.workdir)/roadshow_inputs/platform/lib"
     handle       => "update_files_inputs_roadshow_platform_lib",
     depth_search => r_recurse("inf"),
     copy_from    => r_rcp("${master_roadshow}/platform/lib", ${sys.policy_hub}),
     file_select  => r_policies,
     action       => r_immediate,
     classes      => r_if_repaired("update_report");

  "$(sys.workdir)/roadshow_inputs/platform/$(vendor)_common"
     handle       => "update_files_inputs_roadshow_platform_components",
     copy_from    => r_rcp("${master_roadshow}/platform/${vendor}/$(vendor)_common", ${sys.policy_hub}),
     file_select  => r_policies,
     action       => r_immediate,
     classes      => r_if_repaired("update_report");

  "$(sys.workdir)/roadshow_inputs/platform/${sys.flavor}"
     handle       => "update_files_inputs_roadshow_platform_flavor_components",
     copy_from    => r_rcp("${master_roadshow}/platform/${vendor}/$(sys.flavor)", ${sys.policy_hub}),
     file_select  => r_policies,
     action       => r_immediate,
     classes      => r_if_repaired("update_report");

  "$(sys.workdir)/roadshow_inputs/templates"
     handle       => "update_files_inputs_roadshow_templates",
     depth_search => r_recurse("inf"),
     copy_from    => r_rcp("${master_roadshow}/templates", ${sys.policy_hub}),
     file_select  => r_policies,
     action       => r_immediate,
     classes      => r_if_repaired("update_report");

methods:

  "Determine the vendor"                     usebundle => vendor;
reports:

  "$(this.bundle) vender: $(vendor)";

}

bundle agent vendor {

classes:

  "os_release_has_id" expression => regextract('^ID="?([^"\s]+)"?$',
                                                $(os_release_info),
                                                "id_array"),
                         comment => "Extract ID= line from os-release to id_array";

vars:

  "os_release_info"    string => readfile("/etc/os-release", "512"),
                      comment => "Read /etc/os-release" ;

  "vendor"             string => canonify("$(id_array[1])");

}
