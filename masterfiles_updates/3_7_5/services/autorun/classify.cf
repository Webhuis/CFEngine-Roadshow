bundle agent classify {

classes:

  "parsed_uqdn"      expression => regextract("^(....)(.)(..)(..)(...).*", $(sys.uqhost), "part");
  "parsed_fqdn"      expression => regextract("^(.*)\.([a-z0-9][a-z0-9]*)\.([a-z0-9][a-z0-9]*)", $(sys.fqhost), "org_part");

  "breth0"           expression => regcmp("^breth0", "$(current_device)");
  "eth"              expression => regcmp("^eth", "$(current_device)");
  "vmbr0"            expression => regcmp("^vlan", "$(current_device)");

vars:

  "node_hard_classes"                    data => parsejson('
    {"uqhost": "$(sys.uqhost)", "domain": "$(sys.domain)",
     "os": "$(sys.os)",
     "ostype": "$(sys.ostype)",
     "flavor": "$(sys.flavor)",
     "cpus": "$(sys.cpus)",
     "arch": "$(sys.arch)" }');

  "node_hard_classes_feed"             string => storejson(node_hard_classes);

  "response"                           string => execresult("/var/cfengine/bin/cf-message.py '$(node_hard_classes_feed)'","noshell");
  "fqhost_config_view"                   data =>  parsejson('$(response)');
  "containers"                          slist => getindices("fqhost_config_view");
    
  "role"                               string => "$(part[1])";
  "environment"                        string => "$(part[2])";
  "department"                         string => "$(part[3])";
  "location"                           string => "$(part[4])";
  "instance"                           string => "$(part[5])";

  "organisation"                       string => "$(org_part[2])";

  "role_input"                         string => "$(sys.workdir)/roadshow_inputs/role/$(role).cf";

  "domain"                             string => canonify($(sys.domain));
  "vendor"                             string => $(inventory_linux.id_array[1]);

  "ip_link_all"                        string => execresult("/usr/sbin/ip link | grep 'ether' ", useshell);
  "macs"                                slist => string_split($(ip_link_all), "\n", 99);

  "ipr_all"                            string => execresult("/usr/sbin/ip r", noshell);
  "ipr"                                 slist => string_split($(ipr_all), "\n", 99);

  "ips_all"                            string => execresult("/usr/sbin/ip a | grep 'scope global' ", useshell);
 #"ips_all"                            string => execresult("/usr/sbin/ip a | grep 'brd' | grep 'scope global' ", useshell);
  "ips"                                 slist => string_split($(ips_all), "\n", 99);

  "ipv4_index"                          slist => getindices("sys.ipv4");

  "interface"                          string => "$(dev_type.interface)";
  "bridge"                             string => "$(dev_type.bridge)";

methods:

  "We want to know the device type" usebundle => dev_type("$(ips)");

reports:

  "$(this.bundle) role: $(role) $(role_input)";
  "$(this.bundle) organisation: $(organisation)";
  "$(this.bundle) location: $(location) $($(location).location_name)";
  "$(this.bundle) interface: $(interface)";

}

bundle agent dev_type(ips) {

classes:

  "breth"            expression => regcmp(".*breth.*", "$(ips)");
  "eth"              expression => regcmp(".*eth.*", "$(ips)");
  "vmbr"             expression => regcmp(".*vlan.*", "$(ips)");

vars:

 eth::
  "interface"                           string => "eth";

 vmbr::
  "interface"                           string => "vlan";
  "bridge"                              string => "vmbr0";

 breth::
  "interface"                           string => "eth0";
  "bridge"                              string => "breth0";

reports:

  "$(this.bundle) containers: $(containers)";
  "$(this.bundle) ips: $(ips)";
  "$(this.bundle) interface: $(interface)";
 eth::
  "$(this.bundle) eth interface: $(interface)"; 
 breth::
  "$(this.bundle) breth interface: $(interface), $(bridge)"; 
 vmbr::
  "$(this.bundle) vmbr interface: $(interface), $(bridge)"; 

}

